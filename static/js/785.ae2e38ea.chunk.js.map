{"version":3,"file":"static/js/785.ae2e38ea.chunk.js","mappings":"sUAEMA,EAAW,gCAEXC,EAAM,mCAECC,EAAgB,mCAAG,sGACLC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oCAAiDC,IAD5C,cACtBG,EADsB,OAEtBC,EAASD,EAASE,KAAKC,QAC7BC,QAAQC,IAAIJ,GAHgB,kBAIrBA,GAJqB,2CAAH,qDAMhBK,EAAQ,mCAAG,WAAOC,GAAP,yFACGR,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gCAA6CC,EAA7C,kBAA0DU,EAA1D,YADH,cACdP,EADc,OAEdC,EAASD,EAASE,KAAKC,QAC7BC,QAAQC,IAAIJ,GAHQ,kBAIbA,GAJa,2CAAH,sDAMRO,EAAW,mCAAG,WAAOC,GAAP,yFACAV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,oBAAiDZ,EAAjD,oBADA,cACjBG,EADiB,OAEjBC,EAASD,EAASE,KAExBE,QAAQC,IAAIJ,GAJW,kBAKhBA,GALgB,2CAAH,sDAOXS,EAAa,mCAAG,WAAOD,GAAP,yFACFV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,oBAAiDZ,EAAjD,oBADE,cACnBG,EADmB,OAEnBC,EAASD,EAASE,KAAKS,OAAOC,KAAI,SAAAC,GAAK,OAAEA,EAAMC,IAAR,IAC7CV,QAAQC,IAAIJ,GAHa,kBAIlBA,GAJkB,2CAAH,sDAMbc,EAAW,mCAAG,WAAON,GAAP,yFACAV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,4BAAyDZ,EAAzD,oBADA,cACjBG,EADiB,OAEjBC,EAASD,EAASE,KAAKc,KAC7BZ,QAAQC,IAAIJ,GAHW,kBAIhBA,GAJgB,2CAAH,sDAMXgB,EAAc,mCAAG,WAAOR,GAAP,yFACHV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,4BAAyDZ,EAAzD,oBADG,cACpBG,EADoB,OAEpBC,EAASD,EAASE,KAAKC,QAC7BC,QAAQC,IAAIJ,GAHc,kBAInBA,GAJmB,2CAAH,qD,yGCI3B,UArCgB,WACf,IAAQQ,GAAYS,EAAAA,EAAAA,MAAZT,QACP,GAAwBU,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEOC,GAAaC,EAAAA,EAAAA,cAAW,iBAAC,oGAE9BJ,GAAa,GAFiB,UAGXN,EAAAA,EAAAA,IAAeR,GAHJ,OAGxBW,EAHwB,OAI9BC,EAAQD,GAJsB,gDAM9BK,EAAS,0BANqB,yBAQ9BF,GAAa,GARiB,4EAU/B,CAACd,IAKF,OAHFmB,EAAAA,EAAAA,YAAU,WACNF,GACF,GAAE,CAACA,KAED,6BACE,oCACEJ,GASwB,wCATTE,GASZ,yBAAMA,KARZ,yBACEJ,EAAKR,KAAI,SAACI,GAAD,OACI,gCACV,0BAAKA,EAAKa,OAAV,KACE,uBAAIb,EAAKc,eAFSd,EAAKe,GADnB,QAUf,C","sources":["api.js","components/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n// const KEY = '2e84a3ac834b739d0dd29a1e9937557'\nconst KEY = '2e84a3ac834b739d0dd29a1e99375572'\n\nexport const getTrendingFilms = async () => {\n    const response = await axios.get(`${BASE_URL}trending/all/day?api_key=${KEY}`);\n    const result = response.data.results;\n    console.log(result)\n    return result;\n};\nexport const getFilms = async (query) => {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}&page=1`);\n    const result = response.data.results;\n    console.log(result)\n    return result;\n};\nexport const getFilmById = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n    const result = response.data;\n    //  const result = response.data.genres.map(genre=>genre.name);\n    console.log(result)\n    return result;\n};\nexport const getFilmGenres = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n    const result = response.data.genres.map(genre=>genre.name);\n    console.log(result)\n    return result;\n};\nexport const getFilmCast = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n    const result = response.data.cast;\n    console.log(result)\n    return result;\n};\nexport const getFilmReviews = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US`);\n    const result = response.data.results;\n    console.log(result)\n    return result;\n};\n\n\n\n\n\n\n","import { useParams } from \"react-router-dom\";\nimport { getFilmReviews } from \"api\";\nimport { useState, useEffect, useCallback } from 'react';\n\nconst Reviews = () => {\n const { movieId } = useParams();\n  const [film, setFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n   const fetchFilms = useCallback(async () => {\n  try {\n    setIsLoading(true);\n    const film = await getFilmReviews(movieId);\n    setFilm(film);\n  } catch {\n    setError('Failed to load film :(');\n  } finally {\n    setIsLoading(false);   \n  }\n}, [movieId]);\n\nuseEffect(() => {\n    fetchFilms();\n }, [fetchFilms]);\n  return (\n    <main>\n      <h1>Reviews</h1>\n      {!isLoading ?  (!error ? \n     <div>\n      {film.map((cast) => (\n                    <div key={cast.id}\n        > <li>{cast.author}:\n            <p>{cast.content}</p>\n          </li>\n               </div>\n                ))}\n    </div>:<div>{error}</div>) :<div>Is loading</div>}\n    </main>\n  );\n};\nexport default Reviews;\n"],"names":["BASE_URL","KEY","getTrendingFilms","axios","response","result","data","results","console","log","getFilms","query","getFilmById","movieId","getFilmGenres","genres","map","genre","name","getFilmCast","cast","getFilmReviews","useParams","useState","film","setFilm","isLoading","setIsLoading","error","setError","fetchFilms","useCallback","useEffect","author","content","id"],"sourceRoot":""}