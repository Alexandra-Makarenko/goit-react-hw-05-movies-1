{"version":3,"file":"static/js/75.3c0de4e8.chunk.js","mappings":"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","sources":["api.js","components/FilmList/FilmList.styled.js","components/FilmList/FilmList.js","pages/Home/Home.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n// const KEY = '2e84a3ac834b739d0dd29a1e9937557'\nconst KEY = '2e84a3ac834b739d0dd29a1e99375572'\n\nexport const getTrendingFilms = async () => {\n    const response = await axios.get(`${BASE_URL}trending/all/day?api_key=${KEY}`);\n    const result = response.data.results;\n    console.log(result)\n    return result;\n};\nexport const getFilms = async (query) => {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}&page=1`);\n    const result = response.data.results;\n    console.log(result)\n    return result;\n};\nexport const getFilmById = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n    const result = response.data;\n    //  const result = response.data.genres.map(genre=>genre.name);\n    console.log(result)\n    return result;\n};\nexport const getFilmGenres = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n    const result = response.data.genres.map(genre=>genre.name);\n    console.log(result)\n    return result;\n};\nexport const getFilmCast = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n    const result = response.data.cast;\n    console.log(result)\n    return result;\n};\nexport const getFilmReviews = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US`);\n    const result = response.data.results;\n    console.log(result)\n    return result;\n};\n\n\n\n\n\n\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 10px;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  }\n`;\n\nexport const ListItem = styled.li`\n  list-style:none;\n`;\n","// import { Link } from \"react-router-dom\";\nimport { Container, Img,ListItem } from \"./FilmList.styled\";\nimport { Link,useLocation } from \"react-router-dom\";\n\nconst FilmList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      {films.map((film) => (\n                    <div key={film.id}\n        > {<ListItem><Link to={`/movies/${film.id}`} state={{ from: location }}>\n            <Img src={`https://image.tmdb.org/t/p/w500/${film.poster_path}`} alt={film.title} />\n            {film.title || film.name}\n          </Link>\n        </ListItem>}</div>\n                ))}\n    </Container>\n  );\n};\n\nexport default FilmList;\n","import { useState, useEffect,useCallback  } from 'react';\nimport { getTrendingFilms } from \"api\";\nimport FilmList from \"../../components/FilmList/FilmList\";\nimport { useLocation } from \"react-router-dom\";\n\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  console.log(location);\n\n   const fetchFilms = useCallback(async () => {\n  try {\n    setIsLoading(true);\n    const films = await getTrendingFilms();\n    setFilms(films);\n  } catch {\n    setError('Failed to load films :(');\n  } finally {\n    setIsLoading(false);   \n  }\n}, []);\n\nuseEffect(() => {\n    fetchFilms();\n}, [fetchFilms]);\n  useEffect(() => {\n    location.pathname='/'\n}, [location]);\n  \n \n  return (\n    <main>\n      <h1>Tranding today</h1>\n       {!isLoading ?(!error ? <FilmList films={films} />:<div>{error}</div>)\n        : <div>Is loading</div>}\n    </main>\n  );\n}\nexport default Home;\n"],"names":["BASE_URL","KEY","getTrendingFilms","axios","response","result","data","results","console","log","getFilms","query","getFilmById","movieId","getFilmGenres","genres","map","genre","name","getFilmCast","cast","getFilmReviews","Container","styled","Img","ListItem","films","location","useLocation","film","to","id","state","from","src","poster_path","alt","title","useState","setFilms","isLoading","setIsLoading","error","setError","fetchFilms","useCallback","useEffect","pathname"],"sourceRoot":""}